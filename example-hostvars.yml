---
interfaces:
  wan:
    managed: False
    ipv4: <wan ipv4 address>
    ipv6: <wan ipv6 address>

  <inteface name>:
    announce: yes # Optional, defaults to no, controls wether addresses on this interface will be announced via BGP
    managed: yes|no # Optional, defaults to no, only interfaces with managed set to yes will be configured in /etc/network/interfaces.d
    type: <physical|bridge|dummy|manual> # Interface type, physical denotes interfaces
    manual: # Use only together with type manual
      name: <ifname> # Optional, overrides name set by dictionary key
      virtual: yes|no # Optional, defaults to false, set to yes if interface is not present before ifup
      ipv4: # Optional, list of ipv4 addresses, can also be string or dict if interface has only one address
        - <ipv4 address>
        - { address: <ipv4 address>, flags: <list of flags for this address>, options: <list of options (see inet_options)> }
      ipv6: # Optional, list of ipv6 addresses, can also be string or dict if interface has only one address
        - <ipv6 address>
        - { address: <ipv6 address>, flags: <list of flags for this address>, options: <list of options (see inet6_options)> }
      method: <ifupdown method> # Optional, defaults to static, a valid ifupdown method
      family: inet|inet6 # Optional, defaults to inet, family of the ifupdown method
      inet_options: # Optional, dict of options applied to the first entry of type inet only
        <option>: # List of values for <option>, option could e.g. be 'post-up' or 'netmask', may be a string if there is only one value
          - <value 1>
          - <value 2>
      inet6_options: # Optional, dict of options applied to the first entry of type inet6 only
        <option>: # List of values for <option>, option could e.g. be 'post-up' or 'netmask', may be a string if there is only one value
          - <value 1>
          - <value 2>
    slaves: <list of slaves> # Optional, defaults to [], slave of this interface (currently only supported on bridges)
    ipv4: <ipv4 address in as/prefixlen>
    ipv6: <ipv6 address in as/prefixlen>
    forwarding: yes|no # Optional, allow forwarding of asn traffic
    mtu: <mtu of interface> # Optional
    dhcp:
      address: <ip address for dhcp server> # Optional, defaults to primary ipv4 address of interface
      range: # Optional
        start: <first dhcp address> # Optional
        end: <last dhcp address> # Optional
      options: # Optional, can be used to override dhcp server options
        <option_name>: <option_value>|[ <option_value>, ... ] # Any valid isc-dhcp-server option
    radvd: # Optional, enables IPv6 RAs when defined
      dns_nameservers: [ <nameserver 1>, <nameserver 2> ] # Optional, either list or sigle entry
      dns_searchlist_domains: [ <dns searchdomain 1>, <dns searchdomain 2> ] # Optional, list of searchdomains, either list or single entry
    all_knowing_dns: # Optional
      hostname: "%DIGITS%.<domain_name>" # hostname for IPv6 RDNS
      upstream: "<IPv6 address>"  # Optional, upstream server for RDNS queries

addresses:
  as<asn>: # This name MUST be "as<asn>"
    ipv4: <ipv4 address in as/prefixlen>
    ipv6: <ipv6 address in as/prefixlen>

domains: # Optional
  - domain: <your domain>
    ttl: <default ttl> # Optional, overwrites site ttl
    records:
      <name>:
        - <type>: <content> # DNS resource record
        - <type>: { ttl: <ttl>, content: <content> } # DNS resource record with non-default ttl

# friendly name, don't exceed length of 12 character for readability
friendly_name: <friendly name>

munin_node: # Optional
  allow: # Hosts that are allowed to query this munin node, overrides ACL specified in site
    - <ip address>
    - <ip address>

bgp:
  router_id: <router id>
  route_reflection: off|client|server|<cluster_id> # Optional, defaults to off
  announce: # Optional, list of additional static announcements
    - net: <valid ipv4/ipv6 prefix>
      via: <either an interface or a valid ipv4/ipv6 nexthop> # Optional, unreachable route if not defined

wireguard:
  key:
    private: <private wireguard key>
    public:  <public wireguard key>
  mtu: <internal wireguard mtu> # optional

vultr: # Optional
  ifname: <name of peering interface>
  ipv4:
    address: <local ipv4 address on peering interface>
    peer: <ipv4 address of peer>
    gateway: <ipv4 address of gateway for multihop>

  ipv6:
    address: <local ipv6 address on peering interface>
    peer: <ipv6 address of peer>
    gateway: <ipv6 address of gateway for multihop>

  password: <MD5 auth password>

peerings: # Optional
  <name>:
    peer:
      asn: <asn of peer>
      ipv4: <ipv4 address of peer> # optional
      ipv6: <ipv6 address of peer> # optional
    self:
      ifname: <name of peering interface>
      ipv4: <ipv4 source address> # optional, required only if peer.ipv4 is set
    password: <MD5 auth password> # optional
