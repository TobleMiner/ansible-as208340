function f_upstream_export(bool export_third_party_routes) {
  # Export our own routes and the ones marked for upstream export
  if is_default() then {
    return "Default route not allowed in fulltable setup";
  }
  if ! is_publicly_routable() then {
    return "Not publicly routable";
  }

  if is_own_net() then {
    return "";
  }
  if (65000,0xFF42) ~ bgp_community && export_third_party_routes then {
    return "";
  }
  
  return "Not our own network or marked";
}

filter upstream_export
string res;
{
  res = f_upstream_export(true);
  if res = "" then {
    accept;
  }
  reject res;
}
filter upstream_vultr_export
string res;
{
  res = f_upstream_export(false);
  if res = "" then {
    accept;
  }
  reject res;
}

function f_upstream_import() {
  # Import all valid routes that are not ours, and remove any marks
  if is_default() then {
    return "Default route not allowed in fulltable setup";
  }
  if ! is_publicly_routable() then {
    return "Not publicly routable";
  }
  if is_own_net() then {
    return "Part of our network";
  }
  # Remove all communities from incoming routes to avoid export community being set
  bgp_community = -empty-; 
  return "";
}

filter upstream_import
string res;
{
  res = f_upstream_import();
  if res = "" then {
    accept;
  }
  reject res;
}


function f_downstream_export() {
  # Export every valid route we know
  if is_default() then {
    return "Default route not allowed in fulltable setup";
  }
  if ! is_publicly_routable() then {
    return "Not publicly routable";
  }
  return "";
}

filter downstream_export
string res;
{
  res = f_downstream_export();
  if res = "" then {
    accept;
  }
  reject res;
}

function f_downstream_import() {
  # Import all valid routes that are not ours, and mark for upstream export
  if is_default() then {
    return "Default route not allowed in fulltable setup";
  }
  if ! is_publicly_routable() then {
    return "Not publicly routable";
  }
  if is_own_net() then {
    return "Part of our network";
  }
  # Add community for upstream export
  bgp_community = -empty-;
  bgp_community.add((65000,0xFF42)); 
  return "";
}

filter downstream_import
string res;
{
  res = f_downstream_import();
  if res = "" then {
    accept;
  }
  reject res;
}

filter ibgp_import {
  accept;
}

filter ibgp_export {
  accept;
}
