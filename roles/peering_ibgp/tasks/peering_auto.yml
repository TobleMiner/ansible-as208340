---
- name: Configure ibgp peering
  block:
    - name: Ensure wireguard is set up
      include_role:
        name: wireguard_p2p

    - name: Ensure bgp connections via IPv4 from peering interface are allowed
      template:
        src:  '{{ "etc/iptables.d/500-allow-BGP4-ibgp-{{ peername }}.conf.j2" }}'
        dest: '/etc/iptables.d/500-allow-BGP4-ibgp-{{ peername }}.conf'
      notify: Restart iptables daemon

    - name: Ensure all traffic on ibgp links is routed via fulltable
      template:
        src: '{{ "etc/routing-rules.d/ibgp-{{ peername }}.conf.j2" }}'
        dest: /etc/routing-rules.d/ibgp-{{ peername }}.conf
      notify: Restart routing rule daemon

    - name: Ensure peering firewall is set up
      vars:
        peering:
          self:
            ifname: '{{ wg_iface }}'
      import_role:
        name: peering

    - name: Ensure bgp peering is configured (IPv4)
      vars:
        friendly_name: '{{ peer.friendly_name }}'
        peer_address: '{{ ipv4_address_peer | strip_prefixlen }}'
      template:
        src: '{{ "etc/bird/bird4/peers/ibgp-{{ friendly_name }}.conf.j2" }}'
        dest: '/etc/bird/bird4/peers/ibgp-{{ friendly_name }}.conf'
        mode: 0600
        owner: bird
      notify: Reload bird config

    - name: Ensure bgp connections via IPv6 from peering interface are allowed
      template:
        src:  '{{ "etc/iptables.d/500-allow-BGP6-ibgp-{{ peername }}.conf.j2" }}'
        dest: '/etc/iptables.d/500-allow-BGP6-ibgp-{{ peername }}.conf'
      notify: Restart iptables daemon

    - name: Ensure bgp peering is configured (IPv6)
      vars:
        friendly_name: '{{ peer.friendly_name }}'
        peer_address: '{{ ipv6_address_peer | strip_prefixlen }}'
        peer_interface: '{{ wg_iface }}'
      template:
        src: '{{ "etc/bird/bird6/peers/ibgp-{{ friendly_name }}.conf.j2" }}'
        dest: '/etc/bird/bird6/peers/ibgp-{{ friendly_name }}.conf'
        mode: 0600
        owner: bird
      notify: Reload bird6 config

  vars:
    peer: '{{ hostvars[peername] }}'
    master: '{{ (inventory_hostname | hashnum) > (peername | hashnum) }}'
    ipv4_index_self: '{% if master %}0{% else %}1{% endif %}'
    ipv6_index_self: '{% if master %}1{% else %}2{% endif %}'
    ipv4_index_peer: '{% if master %}1{% else %}0{% endif %}'
    ipv6_index_peer: '{% if master %}2{% else %}1{% endif %}'
    ip_id: '{% if master %}{{ inventory_hostname | ippoolid(peername) }}{% else %}{{ peername | ippoolid(inventory_hostname) }}{% endif %}'
    ipv4_net: '{{ ip_id  | ippool4(ippool.global, ippool.transfer, 31) }}'
    ipv6_net: fe80::/64
    ipv4_address_self: '{{ ipv4_net | ipaddr(ipv4_index_self) }}'
    ipv6_address_self: '{{ ipv6_net | ipaddr(ipv6_index_self) }}'
    ipv4_address_peer: '{{ ipv4_net | ipaddr(ipv4_index_peer) }}'
    ipv6_address_peer: '{{ ipv6_net | ipaddr(ipv6_index_peer) }}'
    port_start: '{{ wireguard.port_range.start | default(wireguard_defaults.port_range.start) }}'
    port_end: '{{ wireguard.port_range.end | default(wireguard_defaults.port_range.end) }}'
    peer_port_start: '{{ peer.wireguard.port_range.start | default(wireguard_defaults.port_range.start) }}'
    peer_port_end: '{{ peer.wireguard.port_range.end | default(wireguard_defaults.port_range.end) }}'
    wg_iface: '{{ ("wg-" ~ peer.friendly_name) | trunc(15) }}'
    wg_self:
      iface: '{{ wg_iface }}'
      key: '{{ wireguard.key }}'
      port: '{{ (inventory_hostname ~ peername) | hashnum(port_start, port_end) }}'
      mtu: '{{ wireguard.mtu }}'
      ipv4:
        - '{{ ipv4_primary }}'
        - '{{ ipv4_address_self }}'
      ipv6:
        - '{{ ipv6_primary }}'
        - '{{ ipv6_address_self }}'
    wg_peer:
      key: '{{ peer.wireguard.key }}'
      port: '{{ (peername ~ inventory_hostname) | hashnum(peer_port_start, peer_port_end) }}'
      endpoint: '{% if (peer.wireguard.float | default(False)) %}False{% else %}{{ peer.interfaces.wan.ipv4 | strip_prefixlen }}{% endif %}'
  when: wireguard is defined and peer.wireguard is defined
